#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os, sys, subprocess
import os.path
from colorama import Fore, Back, Style, init
import urllib.request, urllib.parse, urllib.error
import signal
import time
import gettext

translations = gettext.translation("main", localedir="locales", languages=["it"])
translations.install()


init(autoreset=True)


sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=40, cols=80))


subprocess.call("clear", shell=True)

subprocess.call("nohup wget https://raw.githubusercontent.com/alexis-82/varius/main/check 2>/dev/null", shell=True)
subprocess.call("rm nohup.out", shell=True)
check = os.path.exists("check")

#subprocess.call("cd .tmp/", shell=True)
#subprocess.call("ytdl-patched -V > update", shell=True)
#subprocess.call("rm nohup.out", shell=True)
#subprocess.call("cat version > v1 2>/dev/null && sed -i 's/ //g' v1 && cat v1 > v2 2>/dev/null && sed -i 's/,//g' v2", shell=True)
#subprocess.call("rm versions.json", shell=True)
#subprocess.call("cd ..", shell=True)
subprocess.call("nohup wget https://github.com/yt-dlp/yt-dlp/tags 2>/dev/null", shell=True)
subprocess.call("rm nohup.out", shell=True)
subprocess.call("sed -n -e '1p' -e '/Link--primary/p' tags > vrs", shell=True)
subprocess.call("sed -i /^$/d vrs", shell=True)
subprocess.call("sed -n -e '1p' vrs > vrs2", shell=True)
subprocess.call("grep -o 'tag[^\"]*' vrs2 > update", shell=True)
subprocess.call("sed -i 's/....//' update", shell=True)
#youtube_update = open("update", "r")

print()
print((Fore.RED + "  @@@@@@ @@@  @@@ @@@ @@@@@@@ @@@@@@@@       @@@@@@  @@@  @@@ "))
print((Fore.RED + " !@@     @@!  @@@ @@!   @@!   @@!           @@!  @@@ @@!  @@@ "))
print((Fore.RED + "  !@@!!  @!@  !@! !!@   @!!   @!!!:!        @!@!@!@! @!@  !@! "))
print((Fore.RED + "     !:! !!:  !!! !!:   !!:   !!:           !!:  !!!  !: .:!  "))
print((Fore.RED + " ::.: :   :.:: :  :      :    : :: :::       :   : :    ::    "))
print((Fore.RESET))
print((Fore.GREEN + "                  suiteAV-3.0 Coded by Alexis               "))
print((Fore.GREEN + "                  ---------------------------               "))
print((Style.RESET_ALL))
print()

def checkyoutube():
	file1_path = 'update'
	file2_path = 'yt-ver'

	with open(file1_path, 'r', encoding='utf-8') as check1:
		file1 = check1.read()

	with open(file2_path, 'r', encoding='utf-8') as check2:
		file2 = check2.read()

	if file1 == file2:
		print("STATUS YOUTUBE-DL:",(Fore.BLACK + Back.GREEN + _(" NO UPDATE ")))
		print((Style.RESET_ALL))
		subprocess.call("rm update", shell=True)
		subprocess.call("rm tags vrs vrs2", shell=True)
	else:
		print("STATUS YOUTUBE-DL:",(Fore.BLACK + Back.RED + _(" UPDATE ")))
		print((Style.RESET_ALL))
		subprocess.call("rm update", shell=True)
		subprocess.call("rm tags vrs vrs2", shell=True)
checkyoutube()

def checksoftware():
	file1_path = 'check'
	file2_path = 'version'

	if check is True:
		with open(file1_path, 'r', encoding='utf-8') as checka:
			file1 = checka.read()

		with open(file2_path, 'r', encoding='utf-8') as checkb:
			file2 = checkb.read()

	if check is False:
		print("STATUS SUITEAV:",(Fore.BLACK + Back.CYAN + _(" SITE OFFLINE ")))
		print((Style.RESET_ALL))
		#subprocess.call("rm check*", shell=True)
	elif file1 == file2:
		print("STATUS SUITEAV:",(Fore.BLACK + Back.GREEN + _(" NO UPDATE ")))
		print((Style.RESET_ALL))
		subprocess.call("rm check*", shell=True)
	else:
		print("STATUS SUITEAV:",(Fore.BLACK + Back.RED + _(" UPDATE ")))
		print((Style.RESET_ALL))
		subprocess.call("rm check*", shell=True)
checksoftware()

print()
print()
print(_("*************"))
print(_("* Main Menu *"))
print(_("*************"))
print()
print()
print(_("[1] Installation packages"))
print(_("[2] Updates"))
print()
print()
print("[3] YouTube")
print()
print()
print(_("[4] Downloads"))
print()
print()
print()
print(_("[0] Quit"))
print()
print()
print()
print()

try:
    select = eval(input(": "))
    if select >= 5:
        print()
        print(_("Option not found!"))
        input(_("Press ENTER to continue"))
        os.system("./suiteAV")
except NameError:
    print()
    print(_("Invalid command!"))
    input(_("Press ENTER to continue"))
    os.system("./suiteAV")
except SyntaxError:
    print()
    print(_("Invalid command!"))
    input(_("Press ENTER to continue"))
    os.system("./suiteAV")
except UnboundLocalError:
    print(_("System terminated"))
    
def packages():
	if select == 1:
		subprocess.call("init/packages", shell=True)
packages()

def update():
	if select == 2:
		subprocess.call("init/update", shell=True)
update()

def youtube():
	if select == 3:
		subprocess.call("init/youtube", shell=True)
youtube()

def downloads():
	if select == 4:
		os.system("clear")
		subprocess.call("xdg-open Downloads/", shell=True)
		time.sleep(0.5)
		os.system("clear")
		os.system("./suiteAV")
downloads()

def close():
	if select == 0:
		subprocess.call("rm id", shell=True)
		subprocess.call("clear", shell=True)
		os.kill(os.getppid(), signal.SIGHUP) # killa tutto il terminale
		#os.system("exit")
		#return
close()
